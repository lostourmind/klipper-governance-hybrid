# S1 
[include macros.cfg]
[include flsun_func.cfg]
[exclude_object]
[rotate_logger]
[gcode_arcs]
[display_status]
[respond]

[delayed_gcode reset_flags_on_restart]
initial_duration: 1
gcode:
    RESET_CALIBRATION


####################################################################################################
#motor part
####################################################################################################
[stepper_a]
step_pin: PD6
dir_pin: !PD11  # motor direction pin,"!PE2" and "PE2" represent different directions
enable_pin: !PD10
microsteps: 16 
rotation_distance: 60 #rotation_distance = <full_steps_per_rotation> * <microsteps> / <steps_per_mm>, 
endstop_pin: ^PD9
#position_endstop: 435 # printer printable height
#arm_length = 385 
homing_speed: 50
homing_retract_dist: 3

[stepper_b]
step_pin: PD15
dir_pin: !PE9  # motor direction pin
enable_pin: !PE8
microsteps: 16
rotation_distance: 60
endstop_pin: ^PE7
#position_endstop: 435
#arm_length = 385

[stepper_c]
step_pin: PE3
dir_pin: !PC5  # motor direction pin
enable_pin: !PA4
microsteps: 16
rotation_distance: 60
endstop_pin: ^PA3
#position_endstop: 435
#arm_length = 385

[extruder]
step_pin: PE0
dir_pin: !PB9
enable_pin: !PE4
microsteps: 16
rotation_distance: 4.5
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PB8
sensor_type: RT 100K 3950
pullup_resistor: 510
sensor_pin: PC2
min_temp: -10 # extruder min temp
max_temp: 370 # extruder max temp
max_extrude_cross_section: 50 # default 0.640
max_extrude_only_distance: 500
pressure_advance: 0.015
self_adaption_pressure_advance: on # 'on' represents 'turning the self-adaption pressure advance on'. 'off' represents 'turning the self-adaption pressure advance off'.
#pressure_advance: 0.041
control:pid
pid_Kp: 24.261
pid_Ki: 1.304
pid_Kd: 112.813

[tmc5160 extruder]
cs_pin:PD7
spi_speed:500000
spi_software_sclk_pin:PA6
spi_software_mosi_pin:PA5
spi_software_miso_pin:PC4
sense_resistor: 0.0375
run_current:1.2
hold_current:0.300
stealthchop_threshold: 0

####################################################################################################
#mcu ,pin
####################################################################################################
[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method: command

[heater_fan motherboard_fan]
pin: PB5
heater_temp:50.0

[fan]
pin: PC7
cycle_time: 0.0001
max_power: 0.55

[heater_fan heat_sink_fan] 
pin: PA2
heater_temp: 50.0
shutdown_speed: 0

[heater_bed]
heater_pin: PD5
sensor_pin: PC1
sensor_type: RT 100K 3950
min_temp: -5
max_temp: 140 #hotbed max temp
control:pid
pid_Kp: 42.423
pid_Ki: 1.911
pid_Kd: 235.447

[heater_generic HotBed1]
heater_pin: PB3
sensor_pin: PC0
sensor_type: RT 100K 3950
min_temp: -5
max_temp: 140
control: pid
pid_Kp: 18.240
pid_Ki: 0.558
pid_Kd: 149.109
gcode_id: HB1


[temperature_sensor Armv7 mcu] #the temp of pad
sensor_type: temperature_host
min_temp: -50
max_temp: 100

[temperature_sensor mcu_temp] #the temp of mcu
sensor_type: temperature_mcu
min_temp: -50
max_temp: 100

[input_shaper]
#shaper_freq_x: 41.4   # frequency for the X mark of the test model
#shaper_freq_y: 44.4  # frequency for the Y mark of the test model

[printer]
kinematics: delta
max_velocity: 3000 
max_accel: 40000 
max_accel_to_decel: 6000  
square_corner_velocity: 5 
max_z_velocity: 3000
#delta_radius: 183.3 # delta radius,default is 183.3
print_radius: 165 
minimum_z_position:-5 # min z position nozzle won't go to the position which Z lower the vaule
x_size_offset: 0   #adjust X size accuracy
y_size_offset: 0   #adjust Y size accuracy

################################################################################################################
#calibrate and bed_mesh
################################################################################################################
[delta_calibrate]
radius: 145
horizontal_move_z: 10 #This value is related to the lift height of the nozzle during delta_calibrate
Speed: 100

[probe]  
pin: !PD4
x_offset: 0 
y_offset: 0 
z_offset: -0.25 #the distance between nozzle and level switch
speed: 10
samples: 2 #probe one point three times get an average
samples_result: average  
sample_retract_dist: 5
samples_tolerance: 0.25 # precision
samples_tolerance_retries: 5 

[bed_mesh]
mesh_radius: 140
mesh_origin: 0, 0
mesh_pps: 7, 7
fade_start: 1.0
fade_end: 10.0
fade_target: 0.0
algorithm: bicubic



#############################################################################################################
#GCODE
#############################################################################################################
[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.025 MOVE=1

[gcode_macro ZDOWN]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1

[gcode_macro bed_level_1]
gcode:
    SET_GCODE_OFFSET Z=0
    M117 üõèÔ∏è BED LEVEL START
    G28
    M204 S200
    M104 S140
    M140 S60
    {% if printer.extruder.temperature < 140 or printer.extruder.temperature > 150 %}
      M109 S140
    {% endif %}
    {% if printer.heater_bed.temperature < 55 or printer.heater_bed.temperature > 70 %}
      M190 S60
    {% endif %}
    M117 üî• Level heating completed

    {% if printer.configfile.config["stepper_z"]["position_min"] == "-2.0" %}
      delta_calibrate
    {% else %}
      M117 ‚ö†Ô∏è Skipping delta_calibrate ‚Äî not a delta printer
    {% endif %}

    G1 X0 Y0 Z50 F4200
    M104 S0
    M140 S0
    G28
    F104 K=level_state V=True
    save_config

[gcode_macro bed_level_2]
gcode:
    G28
    M204 S200
    M104 S140
    M140 S60
    {% if printer.extruder.temperature < 140 or printer.extruder.temperature > 150 %}
      M109 S140
    {% endif %}
    {% if printer.heater_bed.temperature < 55 or printer.heater_bed.temperature > 70 %}
      M190 S60
    {% endif %}
    G1 X0 Y0 Z50 F4200
    bed_mesh_calibrate
    G1 X0 Y0 Z50 F4200
    M104 S0
    M140 S0
    G28
    F104 K=level2_state V=True
    save_config

[gcode_macro UNLOAD_FILAMENT]
gcode:
    M117 üî• Heating for unload
    G91
    G1 E-60 F800
    G1 E-40 F300
    G90
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    M117 üßµ Filament unloaded

[gcode_macro CLEAN_FILAMENT]
gcode:
    {% if 'S' in params %}
      {% set speed_factor = printer.gcode_move.speed_factor|float %}
      {% set extrude_factor = printer.gcode_move.extrude_factor|float %}
      {% set temperature = params.S|int %}
      {% if printer.extruder.temperature < temperature - 5 %}
        M109 S{temperature}
      {% endif %}
      M117 üî• Heating for clean
      G91
      M220 S100
      M221 S100
      G1 E100 F1000
      G1 E60 F500
      M220 S{speed_factor*100}
      M221 S{extrude_factor*100}
      G90
      M400
      SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
      M117 üßº Filament cleaned
    {% else %}
      M117 ‚ö†Ô∏è CLEAN_FILAMENT requires S=temperature
    {% endif %}

[gcode_macro LOAD_FILAMENT]
gcode:
    {% if 'S' in params %}
      {% set speed_factor = printer.gcode_move.speed_factor|float %}
      {% set extrude_factor = printer.gcode_move.extrude_factor|float %}
      {% set temperature = params.S|int %}
      {% if printer.extruder.temperature < temperature - 5 %}
        M109 S{temperature}
      {% endif %}
      M117 üî• Heating for load
      G91
      M220 S100
      M221 S100
      G1 E40 F800
      G1 E30 F300
      M400
      M220 S{speed_factor*100}
      M221 S{extrude_factor*100}
      G90
      SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
      M117 üßµ Filament loaded
    {% else %}
      M117 ‚ö†Ô∏è LOAD_FILAMENT requires S=temperature
    {% endif %}

[gcode_macro M600]
gcode:
    PAUSE
    UNLOAD_FILAMENT S=240
    M117 üîÑ Change filament and RESUME

[gcode_macro TMC]
gcode:
    DUMP_TMC STEPPER=extruder

[gcode_macro save_time]
gcode:
    {% set print_time = printer.save_variables.variables.total_time|default(0) %}
    {% set print_time = print_time + printer.print_stats.print_duration/3600 %}
    SAVE_VARIABLE VARIABLE=total_time VALUE={print_time}

[gcode_macro SET_GCODE_OFFSET]
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% set offsets = printer.save_variables.variables.gcode_offsets|default({'x': None,'y': None,'z': None}) %}
    {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}
    {% if 'X' in params %}{% set null = ns.offsets.update({'x': params.X}) %}{% endif %}
    {% if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y}) %}{% endif %}
    {% if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
    {% if 'Z_ADJUST' in params %}
      {% if ns.offsets.z == None %}{% set null = ns.offsets.update({'z': 0}) %}{% endif %}
      {% set null = ns.offsets.update({'z': (ns.offsets.z | float) + (params.Z_ADJUST | float)}) %}
    {% endif %}
    {% if (ns.offsets.z | float) <= 0.1000001 and (ns.offsets.z | float) >= -0.1000001 %}
      _SET_GCODE_OFFSET {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
      SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"
    {% endif %}

[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 3
gcode:
    {% set offsets = printer.save_variables.variables.gcode_offsets %}
    {% if offsets %}
      _SET_GCODE_OFFSET {% for axis, offset in offsets.items() if offset %}{ "%s=%s " % (axis, offset) }{% endfor %}
      { action_respond_info("Loaded gcode offsets from saved variables [%s]" % (offsets)) }
    {% endif %}
    {% if printer.save_temp_variables.variables.level_state %}
      F104 K=level_state V=False
      bed_level_2
    {% endif %}
    {% if printer.save_temp_variables.variables.level2_state %}
      F104 K=level2_state V=False
      M117 üõèÔ∏è Bed level done
    {% endif %}
    {% if printer.save_temp_variables.variables.resonances_state %}
      F104 K=resonances_state V=False
      G28
      M117 üìà Resonance measurement done
    {% endif %}
    {% if printer.save_variables.variables.was_interrupted %}
      M117 ‚ö†Ô∏è Power loss occurred
    {% endif %}
    SAVE_VARIABLE VARIABLE=plr_flag VALUE=False

[delayed_gcode LOAD_FUNCTION_SWITCH_DELAY]
initial_duration: 1
gcode:  
    LOAD_FUNCTION_SWITCH
[output_pin relay_pin]
pin: PE1
pwm: False
value: 0

[gcode_macro relay_on]
gcode:
    SET_PIN PIN=relay_pin VALUE=1

[gcode_macro relay_off]
gcode:
    SET_STEPPER_ENABLE_CUSTOM STEPPER=extruder ENABLE=0
    SET_PIN PIN=relay_pin VALUE=0

[output_pin box_led]
pin: PC6
pwm: True
value: 1
cycle_time: 0.0010

[gcode_macro box_led_on]
gcode:
    SET_PIN PIN=box_led VALUE=1

[gcode_macro box_led_off]
gcode:
    SET_PIN PIN=box_led VALUE=0

[output_pin laser]
pin: PA1
pwm: False
value: 0

[gcode_macro laser_on]
gcode:
    SET_PIN PIN=laser VALUE=1

[gcode_macro laser_off]
gcode:
    SET_PIN PIN=laser VALUE=0

[output_pin LED_WHITE]
pin: PA12
pwm: True
value: 1
cycle_time: 0.010

[output_pin LED_ORANGE]
pin: PD1
pwm: True
value: 0
cycle_time: 0.010

[output_pin LED_RED]
pin: PD0
pwm: True
value: 0
cycle_time: 0.010

[idle_timeout]
gcode:
#   A list of G-Code commands to execute on an idle timeout. See
#   docs/Command_Templates.md for G-Code format. The default is to run
#   "TURN_OFF_HEATERS" and "M84".
    {% if printer.print_stats.state != "paused" %}
      {% if 'heaters' in printer %}
        TURN_OFF_HEATERS
      {% endif %}
    {% endif %}
timeout: 600
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.

####################################################################################################################################
#PAUSE ,RESUME ,CANCEL_PRINT
####################################################################################################################################
[pause_resume]
[gcode_macro PAUSE] 
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    {% if printer.print_stats.state == "printing" %}
      SAVE_POWER_LOSS_PARAMS

      {% set x = params.X|default(0) %}
      {% set y = params.Y|default(-140) %}
      {% set z = params.Z|default(10)|float %}
      {% set e = params.E|default(1) %}
      {% set max_z = printer.toolhead.axis_maximum.z|float %}
      {% set homed_z = printer.gcode_move.homing_origin[2]|float %}
      {% set limit_z = (max_z - homed_z)|round(4,'floor') %}
      {% set act_z = printer.toolhead.position.z|float %}
      {% set lift_z = z|abs %}
      {% set fan_speed = printer.fan.speed|float %}

      {% if act_z >= limit_z - 50 %}
        {% set x = 0 %}
        {% set y = 0 %}
        {% set toohigh = true %}
      {% else %}
        {% set toohigh = false %}
      {% endif %}

      {% if act_z < (limit_z - lift_z) %}
        {% set z_safe = act_z + lift_z %}
      {% else %}
        {% set z_safe = limit_z %}
      {% endif %}

      SET_GCODE_VARIABLE MACRO=PRE_RESUME VARIABLE=fan_speed VALUE={fan_speed}
      PAUSE_BASE
      G91
      {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E-{e} F2100
      {% else %}
        {action_respond_info("Extruder not hot enough")}
      {% endif %}
      {% if "xyz" in printer.toolhead.homed_axes %}    
        G90
        {% if toohigh %}
          G1 X{x} Y{y} Z{z_safe} F6000
          M117 Current position too high ‚Äî parking at X={x} Y={y} Z={z_safe}
        {% else %}
          G1 Z{z_safe} F6000
          G1 X{x} Y{y} F6000
          M117 Paused ‚Äî parked at X={x} Y={y} Z={z_safe}
        {% endif %}
      {% else %}
        {action_respond_info("Printer not homed")}
      {% endif %}

      {% set nozzle_temp = printer.extruder.target|float %}
      SET_GCODE_VARIABLE MACRO=PRE_RESUME VARIABLE=nozzle_temp VALUE={nozzle_temp}
      M104 S90
      M106 S153
      M400
    {% endif %}

[gcode_macro _RESUME_PRE_EXTRUDE]
gcode:
    {% set e = params.E|default(1) %}
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    G90
    M400


[gcode_macro PRE_RESUME]  
description: Recover actions before resuming
variable_fan_speed: 0
variable_nozzle_temp: 0
gcode:
    M117 üîÑ Restoring temps and fan
    M109 S{nozzle_temp}
    {% set e = params.E|default(1) %}
    _RESUME_PRE_EXTRUDE E={e}
    SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False
    screen_led_on R=0 O=0 W=1
    {% set fan_pwm = fan_speed / printer.fan.max_power * 255 %}
    M106 S{fan_pwm}
    
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY) %}
    {% else %}
      {% set get_params = "" %}
    {% endif %}

    ; üßµ Filament validation
    {% set clog = printer.filament_motion_sensor_my_sensor.enabled|default(True) %}
    {% set runout = printer.filament_switch_sensor_filament_sensor.filament_detected|default(True) %}
    {% set extruding = printer.extruder.position|float > 0.0 %}
    {% set filament_ok = (clog and runout) or not extruding %}

    {% if filament_ok %}
      M117 ‚úÖ Filament OK ‚Äî resuming
      PRE_RESUME
      RESUME_BASE {get_params}
    {% else %}
      M117 ‚ùå Filament issue ‚Äî cannot resume
      PAUSE
    {% endif %}

######################################################################
#filament sensor
######################################################################
[filament_switch_sensor filament_sensor] #Êñ≠ÊñôÊ£ÄÊµã
pause_on_runout: False
#runout_gcode:  # pause when filament runout
insert_gcode: 
    # cancel the pause delay_gcode that will be executed after run 50cm
    SET_GCODE_VARIABLE MACRO=PAUSE_AFTER_D VARIABLE=start VALUE=0
switch_off_gcode:
    # cancel the pause delay_gcode that will be executed after run 50cm
    SET_GCODE_VARIABLE MACRO=PAUSE_AFTER_D VARIABLE=start VALUE=0
switch_pin: PA11

[filament_motion_sensor my_sensor] #Â†µÊñôÊ£ÄÊµã
detection_length: 18.0 #Ëøô‰∏™ËÄóÊùêË∑ùÁ¶ª‰πãÂÜÖÔºåÂºÄÂÖ≥Áä∂ÊÄÅÊ≤°ÊúâÂèëÁîüÂèòÂåñÔºåÂç≥Ëß¶Âèë
#   The minimum length of filament pulled through the sensor to trigger
#   a state change on the switch_pin
#   Default is 7 mm.
extruder: extruder
#   The name of the extruder section this sensor is associated with.
#   This parameter must be provided.
switch_pin: PA10
#insert_gcode: RESUME
pause_on_runout: False # This can be set to false to debug false positives putting the sensor in "monitor mode". The printer will not pause but it will run the runout_gcode below. 
#event_delay: 20.0
#pause_delay: 5.0
runout_gcode:
    {% if printer.print_stats.state == "printing" %}
      {% if printer["filament_switch_sensor filament_sensor"].filament_detected %}
        PAUSE
        # screen_led_on R=0 O=1 W=0
        SCREEN_LED_ON R=0 O=0 W=1 #20240814 Temporary change
        M117 Filament Clog Detected!
      {% else %}
        #PAUSE
        PAUSE_AFTER_D D=500
        #M117 Filament Runout Detected!
      {% endif %}
    {% endif %}


[gcode_macro PAUSE_AFTER_D]
description: Trigger to pause the print after a further 'd' mm has been extruded
variable_end_d: 0 #create variable "END_D" which is associated with the PAUSE_AFTER_D gcode macro
variable_start: 0
gcode:
    {% if printer["gcode_macro PAUSE_AFTER_D"].start == 0%}
      {% set d_start = printer.print_stats.filament_used|float %} #starting point is whatever the filament used is when PAUSE_AFTER_D is called
      {% set d_end = (d_start + params.D|float)|float %} #end point is start + D parameter
      SET_GCODE_VARIABLE MACRO=PAUSE_AFTER_D VARIABLE=end_d VALUE={d_end} #write the end value to the END_D gcode variable to access later
      M117 Pause at {d_end|round(2)}
      SET_GCODE_VARIABLE MACRO=PAUSE_AFTER_D VARIABLE=start VALUE=1
      UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=1 #trigger the delayed gcode below after 1 second
    {% endif %}

[delayed_gcode PAUSE_AT_D]
initial_duration: 0 #if initial_duration is zero, the delayed gcode won't start by default
gcode:
    {% if printer["gcode_macro PAUSE_AFTER_D"].start == 0 %}
      UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=0 
    {% else %}
      {% set d_current = printer.print_stats.filament_used|float %} #get the current filament used
      {% if d_current < printer["gcode_macro PAUSE_AFTER_D"].end_d %} #if we aren't at the stopping point
        M117 Stopping {d_current|round(2)} {printer["gcode_macro PAUSE_AFTER_D"].end_d|round(2)}
        UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=1 #restart the timer on the delayed gcode
      {% else %}
        PAUSE
        M117 Filament Runout Detected!
        # screen_led_on R=0 O=1 W=0
        SCREEN_LED_ON R=0 O=0 W=1 #20240814 Temporary change
        UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=0 #set the delayed gcode duration back to zero so it doesn't keep triggering
        SET_GCODE_VARIABLE MACRO=PAUSE_AFTER_D VARIABLE=start VALUE=0
      {% endif %}
    {% endif %}


###########################################################################################################################
###########################################################################################################################
[virtual_sdcard]
path: ~/printer_data/gcodes
on_error_gcode:
    M106 S0
    TURN_OFF_HEATERS
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    SET_FAN_SPEED FAN=box_fan SPEED=0

[save_variables]
filename: ~/savedVariables1.cfg
tempfile: ~/temp/savedVariables1.cfg

[save_temp_variables]
filename: ~/temp/tempVariables.cfg

[resonance_tester]
probe_points:0, 0, 20
accel_chip: adxl345
min_freq: 20
max_freq: 80
accel_per_hz: 300

[adxl345]
cs_pin:PE13
spi_speed: 100000
spi_software_sclk_pin:PE10
spi_software_mosi_pin:PE11
spi_software_miso_pin:PE12
rate:3200

###########################################################################################################################
# M106
###########################################################################################################################
[gcode_macro M106]
description: fan speed control
rename_existing: M106.1
gcode:
    {% set last_fan_speed = printer.fan.speed|float %}
    {% set max_power = printer.fan.max_power|float %}
    {% set last_fan_value = last_fan_speed/max_power %}
    {% set fan_speed = params.S|default(255)|int %}
    {% if last_fan_value < 0.1 and fan_speed > 100 %}
      M106.1 S60
      SET_GCODE_VARIABLE MACRO=set_fan VARIABLE=fan_speed VALUE={fan_speed}
      UPDATE_DELAYED_GCODE ID=setfan DURATION=2
    {% else %}
      M106.1 S{fan_speed}
    {% endif %}
[gcode_macro set_fan]
variable_fan_speed: 0
gcode:
    M106.1 S{fan_speed}
[delayed_gcode setfan]
initial_duration: 0 #if initial_duration is zero, the delayed gcode won't start by default
gcode:
    set_fan
    UPDATE_DELAYED_GCODE ID=setfan DURATION=0

#[include ADXL345.cfg] # load ADXL345 module ,Uncomment it before using ADXL345

# EXP1 / EXP2 (display) pins
#[board_pins]
#aliases:
    # EXP1 header
#    EXP1_1=PC1, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,
#    EXP1_2=PC3, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,
    # EXP2 header
#    EXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,
#    EXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>

############################################################################################################################
############################################################################################################################

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [printer]
#*# delta_radius = 182.212546
#*#
#*# [stepper_a]
#*# angle = 209.677133
#*# arm_length = 385.000000
#*# position_endstop = 430.389508
#*#
#*# [stepper_b]
#*# angle = 329.339434
#*# arm_length = 385.000000
#*# position_endstop = 430.107928
#*#
#*# [stepper_c]
#*# angle = 90.000000
#*# arm_length = 385.000000
#*# position_endstop = 429.118956
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.131064, -0.131064, -0.125912, 0.025956, 0.132417, 0.140070, 0.140070
#*# 	-0.104929, -0.049543, 0.095238, -0.035370, 0.018351, 0.096923, 0.088429
#*# 	-0.170761, -0.031753, -0.000094, -0.026511, -0.036429, -0.011697, -0.000879
#*# 	-0.062750, 0.002523, -0.025161, -0.018490, -0.065854, 0.072350, 0.003691
#*# 	-0.083934, 0.025085, 0.035134, 0.006596, 0.023725, -0.014989, -0.089101
#*# 	-0.077342, 0.024469, 0.116478, 0.001190, 0.063728, 0.096567, 0.096598
#*# 	-0.037388, -0.037388, -0.069917, -0.044000, 0.090697, 0.118126, 0.118126
#*# tension = 0.1
#*# min_x = -153.99
#*# algo = bicubic
#*# y_count = 7
#*# mesh_y_pps = 4
#*# min_y = -153.98
#*# x_count = 7
#*# max_y = 153.99
#*# mesh_x_pps = 4
#*# max_x = 153.99
#*#
#*# [extruder]
#*#
#*# [heater_bed]
#*#
#*# [input_shaper]
#*# shaper_type_x = zero_zv
#*# shaper_freq_x = 39.8
#*# shaper_type_y = zero_zv
#*# shaper_freq_y = 41.4
#*#
#*# [delta_calibrate]
#*# height0 = -0.25
#*# height0_pos = 22967.000,22952.000,22900.500
#*# height1 = -0.25
#*# height1_pos = 26830.000,26891.000,20591.000
#*# height2 = -0.25
#*# height2_pos = 22427.500,29066.500,22376.500
#*# height3 = -0.25
#*# height3_pos = 20764.000,26161.500,26157.000
#*# height4 = -0.25
#*# height4_pos = 22348.500,22291.500,27114.500
#*# height5 = -0.25
#*# height5_pos = 25673.000,20884.000,25591.000
#*# height6 = -0.25
#*# height6_pos = 28071.500,22391.500,22305.000
#*#
#*# [bed_mesh governance]
#*# version = 1
#*# points =
#*# 	  -0.131064, -0.131064, -0.125912, 0.025956, 0.132417, 0.140070, 0.140070
#*# 	  -0.104929, -0.049543, 0.095238, -0.035370, 0.018351, 0.096923, 0.088429
#*# 	  -0.170761, -0.031753, -0.000094, -0.026511, -0.036429, -0.011697, -0.000879
#*# 	  -0.062750, 0.002523, -0.025161, -0.018490, -0.065854, 0.072350, 0.003691
#*# 	  -0.083934, 0.025085, 0.035134, 0.006596, 0.023725, -0.014989, -0.089101
#*# 	  -0.077342, 0.024469, 0.116478, 0.001190, 0.063728, 0.096567, 0.096598
#*# 	  -0.037388, -0.037388, -0.069917, -0.044000, 0.090697, 0.118126, 0.118126
#*# min_x = -153.99
#*# max_x = 153.99
#*# min_y = -153.98
#*# max_y = 153.99
#*# x_count = 7
#*# y_count = 7
#*# mesh_x_pps = 4
#*# mesh_y_pps = 4
#*# algo = bicubic
#*# tension = 0.1
