# ================================
# ISO Canary Stage1 Pack - PROFILE SAFE (v4)
# Defer-persistence aware + in-session hydrator
# ================================

[gcode_macro GOV_SET_MESH_PROFILE_CODE]
description: "Set numeric code for mesh profile name (1=governance, 2=cal1, 3=prod1)"
variable_code: 1
gcode:
    {% set code = params.CODE|int %}
    SET_GCODE_VARIABLE MACRO=GOV_SET_MESH_PROFILE_CODE VARIABLE=code VALUE={code}
    SAVE_VARIABLE VARIABLE=gov_mesh_profile_code VALUE={code}
    RESPOND MSG="GOV: mesh_profile_code set to {code}"

[gcode_macro GOV_MESH_SAVE_CURRENT]
description: "Save current mesh to mapped profile and set hydration flag (requires RESTART to persist)"
gcode:
    {% set code = printer.save_variables.variables.gov_mesh_profile_code|default(1)|int %}
    {% if code == 1 %}
        {% set profile = "governance" %}
    {% elif code == 2 %}
        {% set profile = "cal1" %}
    {% elif code == 3 %}
        {% set profile = "prod1" %}
    {% else %}
        {% set profile = "governance" %}
    {% endif %}
    RESPOND MSG="GOV: saving current mesh to {profile}"
    BED_MESH_PROFILE SAVE={profile}
    SAVE_VARIABLE VARIABLE=gov_default_mesh VALUE=1
    RESPOND MSG="GOV: hydration_flag set to 1 (persist on RESTART)"

[gcode_macro GOV_MESH_FLAGS_READ]
description: "Read back mesh profile code and hydration flag"
gcode:
    {% set code = printer.save_variables.variables.gov_mesh_profile_code|default(0)|int %}
    {% set flag = printer.save_variables.variables.gov_default_mesh|default(0)|int %}
    RESPOND MSG="GOV: mesh_profile_code={code}"
    RESPOND MSG="GOV: hydration_flag={flag}"

[gcode_macro GOV_HYDRATE_NOW]
description: "Load mapped mesh profile immediately (in-session), ignoring hydration flag"
gcode:
    {% set code = printer.save_variables.variables.gov_mesh_profile_code|default(1)|int %}
    {% if code == 1 %}
        {% set profile = "governance" %}
    {% elif code == 2 %}
        {% set profile = "cal1" %}
    {% elif code == 3 %}
        {% set profile = "prod1" %}
    {% else %}
        {% set profile = "governance" %}
    {% endif %}
    RESPOND MSG="GOV: in-session hydration requested for {profile}"
    G4 P1000
    BED_MESH_PROFILE LOAD={profile}
    RESPOND MSG="GOV: in-session hydration complete for {profile}"

[delayed_gcode GOV_STARTUP_HYDRATE]
initial_duration: 2.0
gcode:
    RESPOND MSG="GOV: Startup hydration begin (MID=0)"
    {% if printer.configfile.settings.bed_mesh is defined %}
        {% set has_flag = printer.save_variables.variables.gov_default_mesh|default(0)|int %}
        {% set code = printer.save_variables.variables.gov_mesh_profile_code|default(1)|int %}
        {% if code == 1 %}
            {% set profile = "governance" %}
        {% elif code == 2 %}
            {% set profile = "cal1" %}
        {% elif code == 3 %}
            {% set profile = "prod1" %}
        {% else %}
            {% set profile = "governance" %}
        {% endif %}
        {% if has_flag == 1 %}
            RESPOND MSG="GOV: bed_mesh detected - loading profile {profile}"
            G4 P2000
            BED_MESH_PROFILE LOAD={profile}
            RESPOND MSG="GOV: mesh profile load requested ({profile})"
        {% else %}
            RESPOND MSG="GOV: bed_mesh configured - hydration_flag not set - skipped"
        {% endif %}
    {% else %}
        RESPOND MSG="GOV: bed_mesh not configured - hydration skipped"
    {% endif %}
    RESPOND MSG="GOV: Startup hydration complete"

[delayed_gcode GOV_DELTA_RISK_NOTE]
initial_duration: 1.0
gcode:
    RESPOND MSG="GOV: Risk Note (Delta): home plus probe init required before probing"

[gcode_macro GOV_ECHO]
description: "Emit standardized audit overlays (numeric MUTATION_ID only)"
gcode:
    {% set mid = params.MUTATION_ID|default(0)|int %}
    RESPOND MSG="GOV: Audit Echo (MID={mid})"

[gcode_macro GOV_MESH_SAVE_AND_COMMIT]
description: "Calibrated mesh → save to mapped profile → persist via SAVE_CONFIG + restart"
gcode:
    {% set code = printer.save_variables.variables.gov_mesh_profile_code|default(1)|int %}
    {% if code == 1 %}
        {% set profile = "governance" %}
    {% elif code == 2 %}
        {% set profile = "cal1" %}
    {% elif code == 3 %}
        {% set profile = "prod1" %}
    {% else %}
        {% set profile = "governance" %}
    {% endif %}
    RESPOND MSG="GOV: saving mesh to {profile} and committing to disk"
    BED_MESH_PROFILE SAVE={profile}
    SAVE_VARIABLE VARIABLE=gov_default_mesh VALUE=1
    SAVE_CONFIG
    
######################################################################
# ISO Canary Governance Stage 2 - Probe Guard v1.7 (delta-safe)
# Adds safe Z-offset application and commit macros.
# - GOV_PROBE_TOUCH_CENTER_CAPTURE stores absolute XYZ of contact
# - GOV_PROBE_RECORD_RESULT stores the small relative result from console
# - GOV_PROBE_OFFSET_SUGGEST computes delta = 0 - rel
# - NEW: GOV_Z_OFFSET_APPLY (live adjust) and GOV_Z_OFFSET_COMMIT (persist)
# - NEW: GOV_PROBE_OFFSET_APPLY_SUGGEST (auto-apply from last rel)
######################################################################

[gcode_macro PROBE_STATE_GOV]
description: Session variables for last probe touch and relative result
variable_last_x: 0.0
variable_last_y: 0.0
variable_last_z_abs: 0.0
variable_last_ok: 0
variable_last_z_rel: 0.0
gcode:
    RESPOND MSG="GOV: probe state container ready"

[gcode_macro GOV_PROBE_VALIDATE]
description: Validate probe configuration and home before probing (delta-safe)
gcode:
    RESPOND MSG="GOV: probe validation begin"
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    {% set zmax = printer.toolhead.axis_maximum.z|float %}
    {% set zsafe = (zmax - 50.0) if zmax > 60 else (zmax - 10.0) %}
    G90
    G1 Z{zsafe} F6000
    {% if printer.configfile.settings.probe is defined %}
        SAVE_VARIABLE VARIABLE=gov_probe_ready VALUE=1
        RESPOND MSG="GOV: probe section detected - ready"
    {% else %}
        SAVE_VARIABLE VARIABLE=gov_probe_ready VALUE=0
        RESPOND MSG="GOV: probe section missing - validation failed"
        {% if printer.configfile.settings.pause_resume is defined %}
            PAUSE
        {% endif %}
    {% endif %}
    RESPOND MSG="GOV: probe validation complete"

[gcode_macro GOV_PROBE_FLAGS_READ]
description: Read back probe readiness flag
gcode:
    {% set ready = printer.save_variables.variables.gov_probe_ready|default(0)|int %}
    RESPOND MSG="GOV: probe_ready_flag={ready}"

[gcode_macro GOV_PROBE_TOUCH_CENTER_CAPTURE]
description: Active touch at bed center using PROBE; capture absolute x y z; then lift (delta-safe)
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    {% set zmax = printer.toolhead.axis_maximum.z|float %}
    {% set zsafe = (zmax - 50.0) if zmax > 60 else (zmax - 10.0) %}
    G90
    G1 Z{zsafe} F6000
    G1 X0 Y0 F6000
    RESPOND MSG="GOV: probe touch capture begin"
    {% if printer.configfile.settings.probe is defined %}
        PROBE
        {% set px = printer.toolhead.position.x|float %}
        {% set py = printer.toolhead.position.y|float %}
        {% set pz_abs = printer.toolhead.position.z|float %}
        SET_GCODE_VARIABLE MACRO=PROBE_STATE_GOV VARIABLE=last_x VALUE={px}
        SET_GCODE_VARIABLE MACRO=PROBE_STATE_GOV VARIABLE=last_y VALUE={py}
        SET_GCODE_VARIABLE MACRO=PROBE_STATE_GOV VARIABLE=last_z_abs VALUE={pz_abs}
        SET_GCODE_VARIABLE MACRO=PROBE_STATE_GOV VARIABLE=last_ok VALUE=1
        SAVE_VARIABLE VARIABLE=gov_last_probe_x VALUE={px}
        SAVE_VARIABLE VARIABLE=gov_last_probe_y VALUE={py}
        SAVE_VARIABLE VARIABLE=gov_last_probe_z_abs VALUE={pz_abs}
        SAVE_VARIABLE VARIABLE=gov_probe_last_ok VALUE=1
        RESPOND MSG="GOV: probe captured abs x={px} y={py} z={pz_abs}"
        G1 Z{zsafe} F6000
        RESPOND MSG="GOV: probe touch capture complete"
    {% else %}
        SET_GCODE_VARIABLE MACRO=PROBE_STATE_GOV VARIABLE=last_ok VALUE=0
        SAVE_VARIABLE VARIABLE=gov_probe_last_ok VALUE=0
        RESPOND MSG="GOV: probe section missing - cannot PROBE"
    {% endif %}

[gcode_macro GOV_PROBE_RECORD_RESULT]
description: Record the small relative probe result reported in console (RESULT=<float>)
gcode:
    {% set rel = params.RESULT|default(0.0)|float %}
    SET_GCODE_VARIABLE MACRO=PROBE_STATE_GOV VARIABLE=last_z_rel VALUE={rel}
    SAVE_VARIABLE VARIABLE=gov_last_probe_z_rel VALUE={rel}
    RESPOND MSG="GOV: recorded relative result z={rel}"

[gcode_macro GOV_PROBE_READBACK_VERBOSE]
description: Echo last captured abs x y z, relative z, and ok flag from save_variables
gcode:
    {% set px = printer.save_variables.variables.gov_last_probe_x|default(0.0)|float %}
    {% set py = printer.save_variables.variables.gov_last_probe_y|default(0.0)|float %}
    {% set pz_abs = printer.save_variables.variables.gov_last_probe_z_abs|default(0.0)|float %}
    {% set pz_rel = printer.save_variables.variables.gov_last_probe_z_rel|default(0.0)|float %}
    {% set ok = printer.save_variables.variables.gov_probe_last_ok|default(0)|int %}
    RESPOND MSG="GOV: last_probe_x={px}"
    RESPOND MSG="GOV: last_probe_y={py}"
    RESPOND MSG="GOV: last_probe_z_abs={pz_abs}"
    RESPOND MSG="GOV: last_probe_z_rel={pz_rel}"
    RESPOND MSG="GOV: last_probe_ok={ok}"

[gcode_macro GOV_PROBE_OFFSET_SUGGEST]
description: Suggest a Z-offset delta from last recorded relative result
gcode:
    {% set rel = printer.save_variables.variables.gov_last_probe_z_rel|default(0.0)|float %}
    {% set delta = (0.0 - rel)|float %}
    RESPOND MSG="GOV: last_rel_z={rel} suggested_z_offset_delta={delta}"
    RESPOND MSG="GOV: apply negative of measured if needed so target is zero"

[gcode_macro GOV_Z_OFFSET_APPLY]
description: Apply a live Z offset adjustment (DELTA=<float>), governance-logged
gcode:
    {% set d = params.DELTA|default(0.0)|float %}
    RESPOND MSG="GOV: applying live Z offset adjust delta={d}"
    SET_GCODE_OFFSET Z_ADJUST={d}
    SAVE_VARIABLE VARIABLE=gov_last_z_offset_delta VALUE={d}
    RESPOND MSG="GOV: live offset adjusted; run GOV_Z_OFFSET_COMMIT to persist"

[gcode_macro GOV_Z_OFFSET_COMMIT]
description: Persist the current live Z offset using SAVE_CONFIG (will restart)
gcode:
    RESPOND MSG="GOV: persisting live Z offset via SAVE_CONFIG"
    SAVE_CONFIG

[gcode_macro GOV_PROBE_OFFSET_APPLY_SUGGEST]
description: Auto-apply suggested Z-offset from last relative probe result
gcode:
    {% set rel = printer.save_variables.variables.gov_last_probe_z_rel|default(0.0)|float %}
    {% set delta = (0.0 - rel)|float %}
    RESPOND MSG="GOV: auto-applying suggested delta from last_rel_z={rel}"
    SET_GCODE_OFFSET Z_ADJUST={delta}
    SAVE_VARIABLE VARIABLE=gov_last_z_offset_delta VALUE={delta}
    RESPOND MSG="GOV: live offset adjusted by {delta}; use GOV_Z_OFFSET_COMMIT to persist"

