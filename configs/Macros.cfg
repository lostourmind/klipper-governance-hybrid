######################################################################
# Combined Governance Start Pack v1.1
# - Stage-1: Mesh profile + hydration control (profile-safe, no 'default')
# - Stage-2: Probe guard, capture, offset suggest/apply (delta-safe)
# - Launcher: PRINT_LAUNCHER + START_PRINT_SEQUENCE_GOV + END_PRINT_GOV
# - First-layer stability: slowdown + fan hold, with release macro
# Policy: RESPOND MSG only (no semicolons), parser-safe Jinja, save_variables for flags
######################################################################

# ======================
# Stage-1 - Mesh Control
# ======================

[gcode_macro GOV_SET_MESH_PROFILE_CODE]
description: "Set numeric code for mesh profile name (1=governance, 2=cal1, 3=prod1)"
variable_code: 1
gcode:
    {% set code = params.CODE|default(1)|int %}
    SET_GCODE_VARIABLE MACRO=GOV_SET_MESH_PROFILE_CODE VARIABLE=code VALUE={code}
    SAVE_VARIABLE VARIABLE=gov_mesh_profile_code VALUE={code}
    RESPOND MSG="GOV: mesh_profile_code set to {code}"
[gcode_macro GOV_MESH_SAVE_CURRENT]
description: "Save current mesh to mapped profile and set hydration flag (deferred persist)"
gcode:
    {% set code = printer.save_variables.variables.gov_mesh_profile_code|default(1)|int %}
    {% if code == 1 %}
        {% set profile = "governance" %}
    {% elif code == 2 %}
        {% set profile = "cal1" %}
    {% elif code == 3 %}
        {% set profile = "prod1" %}
    {% else %}
        {% set profile = "governance" %}
    {% endif %}
    RESPOND MSG="GOV: saving current mesh to {profile}"
    BED_MESH_PROFILE SAVE={profile}
    SAVE_VARIABLE VARIABLE=gov_default_mesh VALUE=1
    RESPOND MSG="GOV: hydration_flag set to 1 (persist on RESTART or SAVE_CONFIG)"
[gcode_macro GOV_MESH_FLAGS_READ]
description: "Read back mesh profile code and hydration flag"
gcode:
    {% set code = printer.save_variables.variables.gov_mesh_profile_code|default(0)|int %}
    {% set flag = printer.save_variables.variables.gov_default_mesh|default(0)|int %}
    RESPOND MSG="GOV: mesh_profile_code={code}"
    RESPOND MSG="GOV: hydration_flag={flag}"
[gcode_macro GOV_MESH_SAVE_AND_COMMIT]
description: "Save mesh to mapped profile and persist via SAVE_CONFIG (restarts)"
gcode:
    {% set code = printer.save_variables.variables.gov_mesh_profile_code|default(1)|int %}
    {% if code == 1 %}
        {% set profile = "governance" %}
    {% elif code == 2 %}
        {% set profile = "cal1" %}
    {% elif code == 3 %}
        {% set profile = "prod1" %}
    {% else %}
        {% set profile = "governance" %}
    {% endif %}
    RESPOND MSG="GOV: saving mesh to {profile} and committing to disk"
    BED_MESH_PROFILE SAVE={profile}
    SAVE_VARIABLE VARIABLE=gov_default_mesh VALUE=1
    SAVE_CONFIG
[gcode_macro GOV_HYDRATE_NOW]
description: "Load mapped mesh profile immediately (in-session)"
gcode:
    {% set code = printer.save_variables.variables.gov_mesh_profile_code|default(1)|int %}
    {% if code == 1 %}
        {% set profile = "governance" %}
    {% elif code == 2 %}
        {% set profile = "cal1" %}
    {% elif code == 3 %}
        {% set profile = "prod1" %}
    {% else %}
        {% set profile = "governance" %}
    {% endif %}
    RESPOND MSG="GOV: in-session hydration requested for {profile}"
    G4 P1000
    BED_MESH_PROFILE LOAD={profile}
    RESPOND MSG="GOV: in-session hydration complete for {profile}"
[delayed_gcode GOV_STARTUP_HYDRATE]
initial_duration: 2.0
gcode:
    RESPOND MSG="GOV: Startup hydration begin (MID=0)"
    {% if printer.configfile.settings.bed_mesh is defined %}
        {% set has_flag = printer.save_variables.variables.gov_default_mesh|default(0)|int %}
        {% set code = printer.save_variables.variables.gov_mesh_profile_code|default(1)|int %}
        {% if code == 1 %}
            {% set profile = "governance" %}
        {% elif code == 2 %}
            {% set profile = "cal1" %}
        {% elif code == 3 %}
            {% set profile = "prod1" %}
        {% else %}
            {% set profile = "governance" %}
        {% endif %}
        {% if has_flag == 1 %}
            RESPOND MSG="GOV: bed_mesh detected - loading profile {profile}"
            G4 P2000
            BED_MESH_PROFILE LOAD={profile}
            RESPOND MSG="GOV: mesh profile load requested ({profile})"
        {% else %}
            RESPOND MSG="GOV: bed_mesh configured - hydration_flag not set - skipped"
        {% endif %}
    {% else %}
        RESPOND MSG="GOV: bed_mesh not configured - hydration skipped"
    {% endif %}
    RESPOND MSG="GOV: Startup hydration complete"

[delayed_gcode GOV_DELTA_RISK_NOTE]
initial_duration: 1.0
gcode:
    RESPOND MSG="GOV: Risk Note (Delta): home plus probe init required before probing"

[gcode_macro GOV_ECHO]
description: "Emit standardized audit overlays (numeric MUTATION_ID only)"
gcode:
    {% set mid = params.MUTATION_ID|default(0)|int %}
    RESPOND MSG="GOV: Audit Echo (MID={mid})"


# ======================
# Stage-2 - Probe Guard
# ======================
[gcode_macro PROBE_STATE_GOV]
description: "Session vars for last probe touch and relative result"
variable_last_x: 0.0
variable_last_y: 0.0
variable_last_z_abs: 0.0
variable_last_ok: 0
variable_last_z_rel: 0.0
gcode:
    RESPOND MSG="GOV: probe state container ready"
[gcode_macro GOV_PROBE_VALIDATE]
description: "Validate probe configuration and home before probing (delta-safe)"
gcode:
    RESPOND MSG="GOV: probe validation begin"
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    {% set zmax = printer.toolhead.axis_maximum.z|float %}
    {% set zsafe = (zmax - 50.0) if zmax > 60 else (zmax - 10.0) %}
    G90
    G1 Z{zsafe} F6000
    {% if printer.configfile.settings.probe is defined %}
        SAVE_VARIABLE VARIABLE=gov_probe_ready VALUE=1
        RESPOND MSG="GOV: probe section detected - ready"
    {% else %}
        SAVE_VARIABLE VARIABLE=gov_probe_ready VALUE=0
        RESPOND MSG="GOV: probe section missing - validation failed"
        {% if printer.configfile.settings.pause_resume is defined %}
            PAUSE
        {% endif %}
    {% endif %}
    RESPOND MSG="GOV: probe validation complete"
[gcode_macro GOV_PROBE_FLAGS_READ]
description: "Read back probe readiness flag"
gcode:
    {% set ready = printer.save_variables.variables.gov_probe_ready|default(0)|int %}
    RESPOND MSG="GOV: probe_ready_flag={ready}"
[gcode_macro GOV_PROBE_TOUCH_CENTER_CAPTURE]
description: "Active touch at bed center using PROBE; capture absolute x y z; then lift (delta-safe)"
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    {% set zmax = printer.toolhead.axis_maximum.z|float %}
    {% set zsafe = (zmax - 50.0) if zmax > 60 else (zmax - 10.0) %}
    G90
    G1 Z{zsafe} F6000
    G1 X0 Y0 F6000
    RESPOND MSG="GOV: probe touch capture begin"
    {% if printer.configfile.settings.probe is defined %}
        PROBE
        {% set px = printer.toolhead.position.x|float %}
        {% set py = printer.toolhead.position.y|float %}
        {% set pz_abs = printer.toolhead.position.z|float %}
        SET_GCODE_VARIABLE MACRO=PROBE_STATE_GOV VARIABLE=last_x VALUE={px}
        SET_GCODE_VARIABLE MACRO=PROBE_STATE_GOV VARIABLE=last_y VALUE={py}
        SET_GCODE_VARIABLE MACRO=PROBE_STATE_GOV VARIABLE=last_z_abs VALUE={pz_abs}
        SET_GCODE_VARIABLE MACRO=PROBE_STATE_GOV VARIABLE=last_ok VALUE=1
        SAVE_VARIABLE VARIABLE=gov_last_probe_x VALUE={px}
        SAVE_VARIABLE VARIABLE=gov_last_probe_y VALUE={py}
        SAVE_VARIABLE VARIABLE=gov_last_probe_z_abs VALUE={pz_abs}
        SAVE_VARIABLE VARIABLE=gov_probe_last_ok VALUE=1
        RESPOND MSG="GOV: probe captured abs x={px} y={py} z={pz_abs}"
        G1 Z{zsafe} F6000
        RESPOND MSG="GOV: probe touch capture complete"
    {% else %}
        SET_GCODE_VARIABLE MACRO=PROBE_STATE_GOV VARIABLE=last_ok VALUE=0
        SAVE_VARIABLE VARIABLE=gov_probe_last_ok VALUE=0
        RESPOND MSG="GOV: probe section missing - cannot PROBE"
    {% endif %}
[gcode_macro GOV_PROBE_RECORD_RESULT]
description: "Record the small relative probe result reported in console (RESULT=<float>)"
gcode:
    {% set rel = params.RESULT|default(0.0)|float %}
    SET_GCODE_VARIABLE MACRO=PROBE_STATE_GOV VARIABLE=last_z_rel VALUE={rel}
    SAVE_VARIABLE VARIABLE=gov_last_probe_z_rel VALUE={rel}
    RESPOND MSG="GOV: recorded relative result z={rel}"
[gcode_macro GOV_PROBE_READBACK_VERBOSE]
description: "Echo last captured abs x y z, relative z, and ok flag from save_variables"
gcode:
    {% set px = printer.save_variables.variables.gov_last_probe_x|default(0.0)|float %}
    {% set py = printer.save_variables.variables.gov_last_probe_y|default(0.0)|float %}
    {% set pz_abs = printer.save_variables.variables.gov_last_probe_z_abs|default(0.0)|float %}
    {% set pz_rel = printer.save_variables.variables.gov_last_probe_z_rel|default(0.0)|float %}
    {% set ok = printer.save_variables.variables.gov_probe_last_ok|default(0)|int %}
    RESPOND MSG="GOV: last_probe_x={px}"
    RESPOND MSG="GOV: last_probe_y={py}"
    RESPOND MSG="GOV: last_probe_z_abs={pz_abs}"
    RESPOND MSG="GOV: last_probe_z_rel={pz_rel}"
    RESPOND MSG="GOV: last_probe_ok={ok}"
[gcode_macro GOV_PROBE_OFFSET_SUGGEST]
description: "Suggest a Z-offset delta from last recorded relative result"
gcode:
    {% set rel = printer.save_variables.variables.gov_last_probe_z_rel|default(0.0)|float %}
    {% set delta = (0.0 - rel)|float %}
    RESPOND MSG="GOV: last_rel_z={rel} suggested_z_offset_delta={delta}"
    RESPOND MSG="GOV: apply negative of measured if needed so target is zero"
[gcode_macro GOV_Z_OFFSET_APPLY]
description: "Apply a live Z offset adjustment (DELTA=<float>), governance-logged"
gcode:
    {% set d = params.DELTA|default(0.0)|float %}
    RESPOND MSG="GOV: applying live Z offset adjust delta={d}"
    SET_GCODE_OFFSET Z_ADJUST={d}
    SAVE_VARIABLE VARIABLE=gov_last_z_offset_delta VALUE={d}
    RESPOND MSG="GOV: live offset adjusted - run GOV_Z_OFFSET_COMMIT to persist"
[gcode_macro GOV_Z_OFFSET_COMMIT]
description: "Persist the current live Z offset using SAVE_CONFIG (will restart)"
gcode:
    RESPOND MSG="GOV: persisting live Z offset via SAVE_CONFIG"
    SAVE_CONFIG
[gcode_macro GOV_PROBE_OFFSET_APPLY_SUGGEST]
description: "Auto-apply suggested Z-offset from last relative probe result"
gcode:
    {% set rel = printer.save_variables.variables.gov_last_probe_z_rel|default(0.0)|float %}
    {% set delta = (0.0 - rel)|float %}
    RESPOND MSG="GOV: auto-applying suggested delta from last_rel_z={rel}"
    SET_GCODE_OFFSET Z_ADJUST={delta}
    SAVE_VARIABLE VARIABLE=gov_last_z_offset_delta VALUE={delta}
    RESPOND MSG="GOV: live offset adjusted by {delta} - use GOV_Z_OFFSET_COMMIT to persist"


# ======================
# Launcher - Start/End
# ======================
[gcode_macro PRINT_LAUNCHER]
variable_e: 210
variable_b: 60
variable_xmin: 0.0
variable_xmax: 0.0
variable_ymin: 0.0
variable_ymax: 0.0
variable_fls: 50
variable_flf: 0
variable_lh: 0.2
variable_linew: 0.6
variable_flow: 1.5
gcode:
  {% set e     = printer["gcode_macro PRINT_LAUNCHER"].e     | int   %}
  {% set b     = printer["gcode_macro PRINT_LAUNCHER"].b     | int   %}
  {% set xmin  = printer["gcode_macro PRINT_LAUNCHER"].xmin  | float %}
  {% set xmax  = printer["gcode_macro PRINT_LAUNCHER"].xmax  | float %}
  {% set ymin  = printer["gcode_macro PRINT_LAUNCHER"].ymin  | float %}
  {% set ymax  = printer["gcode_macro PRINT_LAUNCHER"].ymax  | float %}
  {% set fls   = printer["gcode_macro PRINT_LAUNCHER"].fls   | int   %}
  {% set flf   = printer["gcode_macro PRINT_LAUNCHER"].flf   | int   %}
  {% set lh    = printer["gcode_macro PRINT_LAUNCHER"].lh    | float %}
  {% set linew = printer["gcode_macro PRINT_LAUNCHER"].linew | float %}
  {% set flow  = printer["gcode_macro PRINT_LAUNCHER"].flow  | float %}

  RESPOND MSG="GOV: PRINT_LAUNCHER begin"
  RESPOND MSG="GOV: heating targets extruder={e} bed={b}"
  M104 S{e}
  M140 S{b}
  M190 S{b}
  M109 S{e}
  RESPOND MSG="GOV: heaters ready"

  {% set have_bounds = (xmax > xmin) and (ymax > ymin) %}
  {% if have_bounds %}
    RESPOND MSG="GOV: bounds OK -> mesh+purge"
    GOV_CANARY_ADAPTIVE_PREP X_MIN={xmin} X_MAX={xmax} Y_MIN={ymin} Y_MAX={ymax} FIRST_LAYER_SPEED={fls} FIRST_LAYER_FAN={flf} LAYER_H={lh} LINE_WIDTH={linew} FLOW_MULT={flow}
    GOV_PURGE_PRIME X_MIN={xmin} X_MAX={xmax} Y_MIN={ymin} Y_MAX={ymax} FIRST_LAYER_SPEED={fls} FIRST_LAYER_FAN={flf} LAYER_H={lh} LINE_WIDTH={linew} FLOW_MULT={flow} PURGE_LEN=90 PASSES=2 PRIME_MM=6

  {% else %}
    RESPOND MSG="GOV: no bounds provided - skipping mesh+purge"
  {% endif %}

  RESPOND MSG="GOV: PRINT_LAUNCHER handoff complete"

[gcode_macro START_PRINT_SEQUENCE_GOV]
description: "Governance-patched start sequence (delta-safe homing, heating, optional CLEAN/LOAD, first-layer stability)"
gcode:
    RESPOND MSG="GOV: START sequence begin"
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    {% set zmax = printer.toolhead.axis_maximum.z|default(250.0)|float %}
    {% set zsafe = (zmax - 50.0) if zmax > 60 else (zmax - 10.0) %}
    G90
    G1 Z{zsafe} F6000

    {% set hyd = printer.save_variables.variables.gov_default_mesh|default(0)|int %}
    {% if hyd == 1 %}
        RESPOND MSG="GOV: ensuring mesh is hydrated (governance mapping)"
        GOV_HYDRATE_NOW
    {% endif %}

    {% set e = params.EXTRUDER|default(210)|int %}
    {% set b = params.BED|default(60)|int %}
    RESPOND MSG="GOV: heating targets extruder={e} bed={b}"
    M104 S{e}
    M140 S{b}
    M109 S{e}
    M190 S{b}
    RESPOND MSG="GOV: heaters ready"

    # -------- First-layer stability mode --------
    {% set slowpct = params.FIRST_LAYER_SPEED|default(50)|int %}
    {% if slowpct < 10  %}
  {% set slowpct = 10  %}
    {% endif %}
    {% if slowpct > 100  %}
  {% set slowpct = 100  %}
    {% endif %}
    M220 S{slowpct}
    {% set fanpct = params.FIRST_LAYER_FAN|default(0)|int %}
    {% if fanpct < 0  %}
  {% set fanpct = 0  %}
    {% endif %}
    {% if fanpct > 100  %}
  {% set fanpct = 100  %}
    {% endif %}
    {% set fanpwm = (fanpct * 2.55)|int %}
    M106 S{fanpwm}
    RESPOND MSG="GOV: first-layer mode speed={slowpct}% fan={fanpct}%"

    {% if 'PREHEAT_ONLY' in params %}
        RESPOND MSG="GOV: PREHEAT_ONLY requested - ending start sequence"
        RETURN
    {% endif %}

    {% if 'CLEAN' in params %}
        RESPOND MSG="GOV: CLEAN requested"
        CLEAN_FILAMENT S={e}
    {% endif %}
    {% if 'LOAD' in params %}
        RESPOND MSG="GOV: LOAD requested"
        LOAD_FILAMENT S={e}
    {% endif %}

    {% set xmin = params.X_MIN|default(0.0)|float %}
    {% set xmax = params.X_MAX|default(0.0)|float %}
    {% set ymin = params.Y_MIN|default(0.0)|float %}
    {% set ymax = params.Y_MAX|default(0.0)|float %}
    {% set use_bounds = (xmax > xmin) and (ymax > ymin) %}
    {% if use_bounds %}
        {% set cx = (xmin + xmax) / 2.0 %}
        {% set cy = (ymin + ymax) / 2.0 %}
        RESPOND MSG="GOV: moving to print area center X={cx} Y={cy}"
        G1 X{cx} Y{cy} F9000
    {% else %}
        RESPOND MSG="GOV: no bounds provided - skipping center move"
    {% endif %}

    RESPOND MSG="GOV: START sequence complete"
[gcode_macro FIRST_LAYER_STABLE_RELEASE]
description: "Release first-layer stability: restore speed and fan (defaults 100%/100%)"
gcode:
    {% set restore_speed = params.RESTORE_SPEED|default(100)|int %}
    {% if restore_speed < 10  %}
  {% set restore_speed = 10  %}
    {% endif %}
    {% if restore_speed > 200  %}
  {% set restore_speed = 200  %}
    {% endif %}
    M220 S{restore_speed}
    {% set fanpct = params.FAN|default(100)|int %}
    {% if fanpct < 0  %}
  {% set fanpct = 0  %}
    {% endif %}
    {% if fanpct > 100  %}
  {% set fanpct = 100  %}
    {% endif %}
    {% set fanpwm = (fanpct * 2.55)|int %}
    M106 S{fanpwm}
    RESPOND MSG="GOV: first-layer mode released speed={restore_speed}% fan={fanpct}%"
[gcode_macro END_PRINT_GOV]
description: "Governance-patched end wrapper (lift, park, heaters off)"
gcode:
    RESPOND MSG="GOV: END sequence begin"
    {% if "xyz" in printer.toolhead.homed_axes %}
        G91
        G1 Z+25 F1500
        G90
        G1 X0 Y0 F3000
        RESPOND MSG="GOV: parked at X0 Y0"
    {% else %}
        RESPOND MSG="GOV: not homed - skipping park"
    {% endif %}
    M104 S0
    M140 S0
    RESPOND MSG="GOV: heaters off - END complete"

# --- First-layer stability: height-based auto-release ---
[gcode_macro GOV_FLS_STATE]
description: "Holds target release Z for first-layer stability"
variable_release_z: 0.40
gcode:
    RESPOND MSG="GOV: FLS state ready (release_z={printer('gcode_macro GOV_FLS_STATE').release_z})"
[gcode_macro GOV_FLS_ARM]
description: "Arm first-layer stability release with proper gating"
gcode:
  {% set rz = params.RELEASE_Z | default(0.40) | float %}
  {% set xmin = printer["gcode_macro PRINT_LAUNCHER"].xmin | default(-120.0) | float %}
  {% set xmax = printer["gcode_macro PRINT_LAUNCHER"].xmax | default(120.0)  | float %}
  {% set ymin = printer["gcode_macro PRINT_LAUNCHER"].ymin | default(-120.0) | float %}
  {% set ymax = printer["gcode_macro PRINT_LAUNCHER"].ymax | default(120.0)  | float %}
  {% set lh   = printer["gcode_macro PRINT_LAUNCHER"].lh   | default(0.20)   | float %}

  SET_GCODE_VARIABLE MACRO=GOV_FLS_CTL VARIABLE=armed VALUE=1
  SET_GCODE_VARIABLE MACRO=GOV_FLS_CTL VARIABLE=release_z VALUE={rz}
  SET_GCODE_VARIABLE MACRO=GOV_FLS_CTL VARIABLE=xmin VALUE={xmin}
  SET_GCODE_VARIABLE MACRO=GOV_FLS_CTL VARIABLE=xmax VALUE={xmax}
  SET_GCODE_VARIABLE MACRO=GOV_FLS_CTL VARIABLE=ymin VALUE={ymin}
  SET_GCODE_VARIABLE MACRO=GOV_FLS_CTL VARIABLE=ymax VALUE={ymax}
  SET_GCODE_VARIABLE MACRO=GOV_FLS_CTL VARIABLE=lh   VALUE={lh}

  RESPOND MSG="GOV: arming FLS release at Z={rz}mm"
  UPDATE_DELAYED_GCODE ID=GOV_FLS_MON DURATION=1
[delayed_gcode GOV_FLS_WATCH]
initial_duration: 0
gcode:
    {% set rz = printer["gcode_macro GOV_FLS_STATE"].release_z|float %}
    {% set cz = printer.toolhead.position.z|float %}
    {% if "xyz" in printer.toolhead.homed_axes %}
        {% if cz >= rz %}
            RESPOND MSG="GOV: releasing first-layer stability at Z={cz} >= {rz}"
            FIRST_LAYER_STABLE_RELEASE RESTORE_SPEED=100 FAN=100
        {% else %}
            UPDATE_DELAYED_GCODE ID=GOV_FLS_WATCH DURATION=1.0
        {% endif %}
    {% else %}
        # Not homed yet; try again soon
        UPDATE_DELAYED_GCODE ID=GOV_FLS_WATCH DURATION=1.0
    {% endif %}

# --- GOV Canary: Adaptive Mesh & Purge (compat) ---
[gcode_macro GOV_CANARY_ADAPTIVE_PREP]
description: "Adaptive mesh + front-quadrant purge, slicer-bounded, gated"
gcode:
  # -------- Params (raw) --------
  {% set xmin_raw = params.X_MIN | default(0) %}
  {% set xmax_raw = params.X_MAX | default(0) %}
  {% set ymin_raw = params.Y_MIN | default(0) %}
  {% set ymax_raw = params.Y_MAX | default(0) %}
  {% set fls_raw  = params.FIRST_LAYER_SPEED | default(50) %}
  {% set flf_raw  = params.FIRST_LAYER_FAN   | default(0) %}
  {% set lh_raw   = params.LAYER_H           | default(0.2) %}
  {% set line_w_raw   = params.LINE_WIDTH    | default(0.6) %}
  {% set flow_mult_raw = params.FLOW_MULT    | default(1.5) %}

  # -------- Casts (explicit) --------
  {% set xmin = xmin_raw | float %}
  {% set xmax = xmax_raw | float %}
  {% set ymin = ymin_raw | float %}
  {% set ymax = ymax_raw | float %}
  {% set fls  = fls_raw  | int %}
  {% set flf  = flf_raw  | int %}
  {% set lh   = lh_raw   | float %}
  {% set line_w    = line_w_raw | float %}
  {% set flow_mult = flow_mult_raw | float %}

  # -------- Geometry & purge height --------
  {% set purge_h = (lh * 1.5) %}
  {% set arc_len = 60.0 %}
  {% set margin  = 1.0 %}
  {% set bed_x = (xmax - xmin) %}
  {% set xmid = (xmin + (bed_x / 2.0)) %}
  {% set half = (arc_len / 2.0) %}
  {% set x0p_init = (xmid - half) %}
  {% set x0p = x0p_init %}
  {% if x0p < (xmin + margin)  %}
  {% set x0p = (xmin + margin)  %}
  {% endif %}
  {% set x1max = (xmax - margin) %}
  {% set x1p_init = (x0p + arc_len) %}
  {% set x1p = x1p_init %}
  {% if x1p > x1max  %}
  {% set x1p = x1max  %}
  {% endif %}
  {% set x0 = (x1p - arc_len) %}
  {% set y0 = (ymin + margin) %}
  {% set y1 = (y0 + 1.0) %}

  # -------- Derived values (pre-rounded for safe {...}) --------
  {% set xmin_r2 = xmin | round(2) %}
  {% set ymin_r2 = ymin | round(2) %}
  {% set xmax_r2 = xmax | round(2) %}
  {% set ymax_r2 = ymax | round(2) %}
  {% set purge_h_r3 = purge_h | round(3) %}
  {% set len_mm = (x1p - x0) %}
  {% set len_mm_r1 = len_mm | round(1) %}
  {% set x0_r3 = x0 | round(3) %}
  {% set y0_r3 = y0 | round(3) %}
  {% set x1p_r3 = x1p | round(3) %}
  {% set y1_r3 = y1 | round(3) %}
  {% set s_fan = (flf * 2.55) | round(0) | int %}
  {% set feed = (fls * 60) | int %}

  RESPOND MSG="GOV PLAN: BED_MESH_CALIBRATE MESH_MIN={xmin_r2},{ymin_r2} MESH_MAX={xmax_r2},{ymax_r2}"
  RESPOND MSG="GOV PLAN: Purge Z={purge_h_r3}mm - Speed={fls} - Fan%={flf} - Len={len_mm_r1}"

  # -------- Mesh gate (baseline + hydration flag + startup delay >= 2.0s) --------
  {% set gov_mesh = printer.save_variables.variables.gov_default_mesh | default(1) | int %}
  {% set factory_done = printer.save_variables.variables.factory_cal_complete | default(0) | int %}
  {% if factory_done != 1 %}
    RESPOND MSG="DRIFT_ALERT: Factory calibration not confirmed - skipping automated mesh"
  {% elif gov_mesh != 1 %}
    RESPOND MSG="GOV: Mesh hydration gated by gov_default_mesh=0 - skipping BED_MESH_CALIBRATE"
  {% else %}
    RESPOND MSG="GOV: Hydrating mesh after 2.0s delay"
    G4 P2000
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE MESH_MIN={xmin},{ymin} MESH_MAX={xmax},{ymax}
  {% endif %}

  # -------- Purge path setup --------
  {% set segs = 12 %}
  {% set pass_len = (x1p - x0) %}
  {% set area = 3.1415926535 * (1.75 / 2.0) * (1.75 / 2.0) %}
  {% set vol_per_mm = (line_w * purge_h * flow_mult) %}
  {% set e_per_mm = (vol_per_mm / area) %}
  {% set seg_len = (pass_len / segs) %}
  {% set e_seg = (e_per_mm * seg_len) %}
  {% set e_seg_r4 = e_seg | round(4) %}

  SAVE_GCODE_STATE NAME=GOV_ADAPT_PURGE_STATE
  G90
  M83
  G92 E0

  {% if s_fan > 0 %}
    M106 S{s_fan}
  {% else %}
    M107
  {% endif %}

  # Pass 1: forward arc along front quad
[gcode_macro GOV_PURGE_PRIME]
description: "Robust front-quadrant purge using slicer bounds (isolated speed/fan)"
# Params (all optional):
#  X_MIN,X_MAX,Y_MIN,Y_MAX  -> from slicer
#  FIRST_LAYER_SPEED (mm/s), FIRST_LAYER_FAN (%), LAYER_H (mm), LINE_WIDTH (mm), FLOW_MULT
#  PURGE_LEN (mm per pass, default 90), PASSES (default 2), PRIME_MM (filament mm to blob, default 6)
gcode:
  {% set xmin = params.X_MIN|default(0)|float %}
  {% set xmax = params.X_MAX|default(0)|float %}
  {% set ymin = params.Y_MIN|default(0)|float %}
  {% set ymax = params.Y_MAX|default(0)|float %}
  {% set fls  = params.FIRST_LAYER_SPEED|default(50)|int %}
  {% set flf  = params.FIRST_LAYER_FAN|default(0)|int %}
  {% set lh   = params.LAYER_H|default(0.20)|float %}
  {% set lw   = params.LINE_WIDTH|default(0.60)|float %}
  {% set flow = params.FLOW_MULT|default(1.15)|float %}
  {% set passes = params.PASSES|default(2)|int %}
  {% set purge_len = params.PURGE_LEN|default(90)|float %}
  {% set prime_mm = params.PRIME_MM|default(6)|float %}

  {% set margin = 1.5 %}
  {% set y0 = ymin + margin %}
  {% set y1 = y0 + 1.0 %}
  {% set x0 = xmin + margin %}
  {% set x1 = x0 + purge_len %}
  {% set x1max = xmax - margin %}
  {% if x1 > x1max %}{% set x1 = x1max %}{% endif %}
  {% set run_len = x1 - x0 %}
  {% if run_len < 20 %}{% set run_len = 20.0 %}{% set x1 = x0 + run_len %}{% endif %}

  {% set fd = printer.extruder.filament_diameter|default(1.75)|float %}
  {% set area = 3.1415926535 * (fd/2.0) * (fd/2.0) %}
  {% set purge_h = lh * 1.5 %}
  {% set vol_per_mm = lw * purge_h * flow %}
  {% set e_per_mm = vol_per_mm / area %}
  {% set e_run = e_per_mm * run_len %}
  {% set e_prime = prime_mm %}

  {% set feed_print = (fls * 60)|int %}
  {% set fan_pwm = (flf * 2.55)|int %}

  {% set run_len_r1 = run_len | round(1) %}
  {% set purge_h_r3 = purge_h | round(3) %}

  {% set sf_prev = (printer.gcode_move.speed_factor * 100.0) | round(0) | int %}
  {% set fan_prev_pwm = (printer.fan.speed * 255.0) | round(0) | int %}

  RESPOND MSG="GOV PURGE: blob={e_prime}mm + {passes}x{run_len_r1}mm @ Z={purge_h_r3} (speed={fls} fan={flf}%)"

  SAVE_GCODE_STATE NAME=GOV_PURGE_STATE
  G90
  M83
  G92 E0

  {% if flf > 0 %}
    M106 S{fan_pwm}
  {% else %}
    M107
  {% endif %}

  G1 Z{purge_h_r3} F1200
  G1 X{x0|round(3)} Y{y0|round(3)} F6000
  G1 E{e_prime|round(2)} F300

  G1 X{x0|round(3)} Y{y0|round(3)} F6000
  G1 X{x1|round(3)} Y{y0|round(3)} E{e_run|round(3)} F{feed_print}
  {% if passes > 1 %}
    G1 X{x1|round(3)} Y{y1|round(3)} F6000
    G1 X{x0|round(3)} Y{y1|round(3)} E{e_run|round(3)} F{feed_print}
  {% endif %}

  G1 E-0.6 F1800

  M106 S{fan_prev_pwm}

  RESTORE_GCODE_STATE NAME=GOV_PURGE_STATE MOVE=1

[gcode_macro PRINT_END]
description: "Lift, center, home, cool, then disable steppers when cool (delta-safe)"
# Temperature thresholds for motor disable (edit to taste)
variable_cool_extruder: 50     # °C
variable_cool_bed: 40          # °C
gcode:
  RESPOND MSG="GOV: PRINT_END sequence"
  # Geometry / limits
  {% set zmax  = printer.toolhead.axis_maximum.z | float %}
  {% set curz  = printer.gcode_move.position.z   | float %}
  {% set lift  = 20.0 %}
  {% set half  = (zmax / 2.0) %}
  {% if lift > half %}{% set lift = half %}{% endif %}
  {% set zcap  = zmax - 5.0 %}
  {% set newz  = curz + lift %}
  {% if newz > zcap %}{% set newz = zcap %}{% endif %}

  G90
  G1 Z{ newz | round(2) } F6000
  G1 X0 Y0 F9000
  G28

  ; Cooldown
  M106 S0
  TURN_OFF_HEATERS

  ; Poll temps and disable motors when cool
  UPDATE_DELAYED_GCODE ID=GOV_MOTORS_OFF_WHEN_COOL DURATION=10

[delayed_gcode GOV_MOTORS_OFF_WHEN_COOL]
gcode:
  {% set t_ext = printer.extruder.temperature | float %}
  {% set t_bed = printer.heater_bed.temperature | float %}
  {% set th_ext = printer["gcode_macro PRINT_END"].cool_extruder | default(50) | int %}
  {% set th_bed = printer["gcode_macro PRINT_END"].cool_bed | default(40) | int %}

  {% if (t_ext <= th_ext) and (t_bed <= th_bed) %}
    RESPOND MSG={"GOV: Cooldown reached (E<=" ~ th_ext|string ~ "C, Bed<=" ~ th_bed|string ~ "C) - disabling steppers"}
    M84
  {% else %}
    UPDATE_DELAYED_GCODE ID=GOV_MOTORS_OFF_WHEN_COOL DURATION=15
  {% endif %}

# --- FLS control & monitor (gated release) ---
[gcode_macro GOV_FLS_CTL]
description: "FLS state + gate: release only when actually printing past first layer"
variable_armed: 0
variable_release_z: 0.40
variable_min_seconds: 15
variable_xmin: -120.0
variable_xmax: 120.0
variable_ymin: -120.0
variable_ymax: 120.0
variable_lh: 0.20
gcode:
  ; container for variables

[delayed_gcode GOV_FLS_MON]
gcode:
  {% set armed = printer["gcode_macro GOV_FLS_CTL"].armed | int %}
  {% if not armed %}
    UPDATE_DELAYED_GCODE ID=GOV_FLS_MON DURATION=0
  {% else %}
    {% set st = printer.print_stats.state %}
    {% set paused = (st == "paused") %}
    {% set printing = (st == "printing") %}
    {% set z = printer.gcode_move.position.z | float %}
    {% set lh  = printer["gcode_macro GOV_FLS_CTL"].lh | float %}
    {% set rz  = printer["gcode_macro GOV_FLS_CTL"].release_z | float %}
    {% set gate_z = rz if rz > (lh*1.2) else (lh*1.2) %}
    {% set t_min = printer["gcode_macro GOV_FLS_CTL"].min_seconds | int %}
    {% set t_now = printer.print_stats.print_duration | float %}

    {% if printing and (not paused) and (t_now >= t_min) and (z >= gate_z) %}
      RESPOND MSG="GOV: first-layer mode released speed=100% fan=100%"
      SET_GCODE_VARIABLE MACRO=GOV_FLS_CTL VARIABLE=armed VALUE=0
      UPDATE_DELAYED_GCODE ID=GOV_FLS_MON DURATION=0
    {% else %}
      UPDATE_DELAYED_GCODE ID=GOV_FLS_MON DURATION=1
    {% endif %}
  {% endif %}

[gcode_macro GOV_FLS_FORCE_RELEASE]
gcode:
  RESPOND MSG="GOV: manual FLS release"
  SET_GCODE_VARIABLE MACRO=GOV_FLS_CTL VARIABLE=armed VALUE=0

[gcode_macro START_PRINT]
description: "Relay: START_PRINT -> PRINT_LAUNCHER (with param forwarding + defaults)"
gcode:
  {% set e     = params.EXTRUDER_TEMP     | default(230)   | int %}
  {% set b     = params.BED_TEMP          | default(60)    | int %}
  {% set xmin  = params.X_MIN             | default(-120)  | float %}
  {% set xmax  = params.X_MAX             | default(120)   | float %}
  {% set ymin  = params.Y_MIN             | default(-120)  | float %}
  {% set ymax  = params.Y_MAX             | default(120)   | float %}
  {% set fls   = params.FIRST_LAYER_SPEED | default(50)    | int %}
  {% set flf   = params.FIRST_LAYER_FAN   | default(0)     | int %}
  {% set lh    = params.LAYER_H           | default(0.2)   | float %}
  {% set linew = params.LINE_WIDTH        | default(0.6)   | float %}
  {% set flow  = params.FLOW_MULT         | default(1.5)   | float %}
  PRINT_LAUNCHER EXTRUDER_TEMP={e} BED_TEMP={b} X_MIN={xmin} X_MAX={xmax} Y_MIN={ymin} Y_MAX={ymax} FIRST_LAYER_SPEED={fls} FIRST_LAYER_FAN={flf} LAYER_H={lh} LINE_WIDTH={linew} FLOW_MULT={flow}

[gcode_macro PRINT_START]
description: "Relay: PRINT_START -> PRINT_LAUNCHER (with param forwarding + defaults)"
gcode:
  {% set e     = params.EXTRUDER_TEMP     | default(230)   | int %}
  {% set b     = params.BED_TEMP          | default(60)    | int %}
  {% set xmin  = params.X_MIN             | default(-120)  | float %}
  {% set xmax  = params.X_MAX             | default(120)   | float %}
  {% set ymin  = params.Y_MIN             | default(-120)  | float %}
  {% set ymax  = params.Y_MAX             | default(120)   | float %}
  {% set fls   = params.FIRST_LAYER_SPEED | default(50)    | int %}
  {% set flf   = params.FIRST_LAYER_FAN   | default(0)     | int %}
  {% set lh    = params.LAYER_H           | default(0.2)   | float %}
  {% set linew = params.LINE_WIDTH        | default(0.6)   | float %}
  {% set flow  = params.FLOW_MULT         | default(1.5)   | float %}
  PRINT_LAUNCHER EXTRUDER_TEMP={e} BED_TEMP={b} X_MIN={xmin} X_MAX={xmax} Y_MIN={ymin} Y_MAX={ymax} FIRST_LAYER_SPEED={fls} FIRST_LAYER_FAN={flf} LAYER_H={lh} LINE_WIDTH={linew} FLOW_MULT={flow}


[gcode_macro END_PRINT]
description: "Relay: END_PRINT -> PRINT_END"
gcode:
  PRINT_END


[gcode_macro PRINT_END_SHIM]
description: "Relay: PRINT_END_SHIM -> PRINT_END"
gcode:
  PRINT_END
